h1. SwineHerd

Swineherd allows you to flexibly combine Pig jobs, Wukong scripts, and R analysis and plotting into a set of simple (and idempotent) rake tasks.

h2. Core features

* Easily specify a complex data workflow consisting of "Pig":http://hadoop.apache.org/pig, "Wukong":http://github.com/infochimps/wukong, and "R":http://www.r-project.org/ scripts.
* Write Pig, Wukong, and R scripts using eruby templates.

h3. Rake Example

If you've already written a pig script and simply want to run it as an idempotent rake task you can use the PigTask class.

<pre><code>

require 'swineherd' ; include Swineherd

PigTask.new_pig_task(:foopig, 'foo.pig') do |options|
  options[:inputs]           = {:in  => 'foo.tsv'}
  options[:outputs]          = {:out => '/tmp/foo.tsv'}
  options[:extra_pig_params] = {:n   => '1L'}
end

</code></pre>

The above example defines a new rake task called foobar. To run it, simply do:

<pre><code>
    rake -f /path/to/rakefile foopig
</code></pre>

and watch it go.

Dependencies are easy too:

<pre><code>
task :foopig => [:other_task1, :other_task2]
</code></pre>

h3. ERB example

You can also use the PigScript class which allows you to use eruby templates like this:

<pre><code>
    require 'swineherd' ; include Swineherd

    PigScript.new('foo.pig.erb', {:key => value}).run
    
</code></pre>

Here a pig script is created, the values of the passed in options hash are substituted into the erb template, and the pig script is ran.

h3. Features

* Code interdependent pig jobs, wukong scripts, and R analysis using rake
* Sane handling of options
* Check all outputs, don't run at all if they exist
* Write Pig in pig latin, R in r and so on.


h3. Philosophy

Swineherd is built on the notion that if you're going to use Pig you should learn Pig Latin. If you're going to use R you should learn R. All swineherd provides is a convenient ruby way of using these tools.

* A Pig script should play nicely with other data processing tools. ie. R and Wukong
* A job should not run if the output data is already there, but pass to the next task
* Passing in options should be done in a uniform way. ie. eruby templates
* Pig doesn't have an "include" statement
* A minor change in a data model shouldn't require rewriting of every script in a workflow
