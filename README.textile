h1. SwineHerd

A "swineherd":http://en.wikipedia.org/wiki/Swineherd with a magic ruby to make pig fly.

Swineherd allows you to write rake tasks to run pig scripts.

h3. Cooked Example

<pre><code>
#
# Example of creating a pig_task with swineherd
#
require 'swineherd' ; include Swineherd

#
# Here we use the pig_script class to create
# a new pig script to run. Alternatively, there could
# be an existing script on disk.
#

PigTask.run_pig_job(:foobar, '/path/to/pig_script.pig',
  {
    :inputs => {
      :in => "foo.tsv"
    },
    :outputs => {
      :out => "/tmp/foo.tsv"
    },
    :extra_pig_params => {
      :n => '1L'
    }
  })
</code></pre>

The above example defines a rake task called <pre><code>foobar</code></pre>. Then, from the command-line, do:

<pre><code>
    rake -f pigtask.rake foobar
</code></pre>

and watch it go.

h3. ERB example

You can also use the PigScript class which allows you to use eruby templates like this:

<pre><code>
    require 'swineherd' ; include Swineherd

    PigScript.new('foo.pig.erb', {:key => value}).run
    
</code></code>

Here a pig script is created, the values of the passed in options hash are substituted into the erb template, and the pig script is ran.

h3. Features

* Code dependent pig jobs using rake
* Sane handling of options
* Check all outputs, don't run at all if they exist
* Write your pig scripts using erb templates
